using UnityEditor;



namespace EMX.HierarchyPlugin.Editor
{

	partial class EditorSettingsAdapter
	{



		internal bool PLAYMODESAVER_SAVE_UNITYOBJECT { get { return GET( "PLAYMODESAVER_SAVE_UNITYOBJECT", true ); } set { var r = PLAYMODESAVER_SAVE_UNITYOBJECT; SET( "PLAYMODESAVER_SAVE_UNITYOBJECT", value ); p.RESET_DRAWSTACK( 0 ); } }
		internal bool PLAYMODESAVER_USE_ADD_REMOVE_COMPONENTS { get { return GET( "PLAYMODESAVER_USE_ADD_REMOVE", true ); } set { var r = PLAYMODESAVER_USE_ADD_REMOVE_COMPONENTS; SET( "PLAYMODESAVER_USE_ADD_REMOVE", value ); p.RESET_DRAWSTACK( 0 ); } }
		internal bool PLAYMODESAVER_SAVE_ENABLINGDISABLING_GAMEOBJEST_MENU { get { return GET( "PLAYMODESAVER_SAVE_ENABLINGDISABLING_GAMEOBJEST", true ); } set { var r = PLAYMODESAVER_SAVE_ENABLINGDISABLING_GAMEOBJEST_MENU; SET( "PLAYMODESAVER_SAVE_ENABLINGDISABLING_GAMEOBJEST", value ); p.RESET_DRAWSTACK( 0 ); } }
		internal bool PLAYMODESAVER_SAVE_GAMEOBJET_HIERARCHY_MENU { get { return GET( "PLAYMODESAVER_SAVE_GAMEOBJET_HIERARCHY", true ); } set { var r = PLAYMODESAVER_SAVE_GAMEOBJET_HIERARCHY_MENU; SET( "PLAYMODESAVER_SAVE_GAMEOBJET_HIERARCHY", value ); p.RESET_DRAWSTACK( 0 ); } }
		internal bool PLAYMODESAVER_SAVE_USE_PERMANENT_LIST_OF_MONOSCRIPTS { get { return GET( "PLAYMODESAVER_SAVE_USE_PERMANENT_LIST_OF_MONOSCRIPTS", true ); } set { var r = PLAYMODESAVER_SAVE_USE_PERMANENT_LIST_OF_MONOSCRIPTS; SET( "PLAYMODESAVER_SAVE_USE_PERMANENT_LIST_OF_MONOSCRIPTS", value ); p.RESET_DRAWSTACK( 0 ); } }


		internal bool PLAYMODESAVER_HIDE_ICONS_FOR_UNASSIGNED { get { return GET( "PLAYMODESAVER_HIDE_ICONS_FOR_UNASSIGNED", false ); } set { var r = PLAYMODESAVER_HIDE_ICONS_FOR_UNASSIGNED; SET( "PLAYMODESAVER_HIDE_ICONS_FOR_UNASSIGNED", value ); p.RESET_DRAWSTACK( 0 ); } }

		internal bool PLAYMODESAVER_DRAW_ICONS_FOR_UNASSIGNED { get { return !PLAYMODESAVER_HIDE_ICONS_FOR_UNASSIGNED; } set {  PLAYMODESAVER_HIDE_ICONS_FOR_UNASSIGNED = !value ; } }



		internal bool PLAYMODESAVER_CHANGE_BUTTON_CURSOR { get { return GET( "PLAYMODESAVER_CHANGE_BUTTON_CURSOR", true ); } set { var r = PLAYMODESAVER_CHANGE_BUTTON_CURSOR; SET( "PLAYMODESAVER_CHANGE_BUTTON_CURSOR", value ); p.RESET_DRAWSTACK( 0 ); } }


		internal float PLAYMODESAVER_OPACITY_DISABLED_ICONS { get { return GET( "PLAYMODESAVER_OPACITY_DISABLED_ICONS", 0.5f ); } set { var r = PLAYMODESAVER_OPACITY_DISABLED_ICONS; SET( "PLAYMODESAVER_OPACITY_DISABLED_ICONS", value ); p.RESET_DRAWSTACK( 0 ); } }

		//TEMP
		//internal bool PLAYMODESAVER_TEMP_WERE_PLAYED { get { return GET( "PLAYMODESAVER_TEMP_WERE_PLAYED", false ); } set {var r = qwe; SET( "PLAYMODESAVER_TEMP_WERE_PLAYED", value ); } }
		// internal bool PLAYMODESAVER_TEMP_SKIP_INIT { get { return GET( "PLAYMODESAVER_TEMP_SKIP_INIT", false ); } set {var r = qwe; SET( "PLAYMODESAVER_TEMP_SKIP_INIT", value ); } }
		// internal bool PLAYMODESAVER_TEMP_WERE_LAST_SAVED { get { return GET( "PLAYMODESAVER_TEMP_WERE_LAST_SAVED", false ); } set {var r = qwe; SET( "PLAYMODESAVER_TEMP_WERE_LAST_SAVED", value ); } }
		internal bool PLAYMODESAVER_TEMP_WERE_PLAYED { get { return SessionState.GetBool( "PLAYMODESAVER_TEMP_WERE_PLAYED", false ); } set { SessionState.SetBool( "PLAYMODESAVER_TEMP_WERE_PLAYED", value ); } }
		internal bool PLAYMODESAVER_TEMP_SKIP_INIT { get { return SessionState.GetBool( "PLAYMODESAVER_TEMP_SKIP_INIT", false ); } set { SessionState.SetBool( "PLAYMODESAVER_TEMP_SKIP_INIT", value ); } }
		internal bool PLAYMODESAVER_TEMP_WERE_LAST_SAVED { get { return SessionState.GetBool( "PLAYMODESAVER_TEMP_WERE_LAST_SAVED", false ); } set { SessionState.SetBool( "PLAYMODESAVER_TEMP_WERE_LAST_SAVED", value ); } }



	}
}
